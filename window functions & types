-- Window Function 
-- TABLE STRUCTURE WON'T CHANGE & IT ADDS NEW COLUMN[WINDOW FUN]
drop table if exists sales;
CREATE TABLE Sales (
    TransactionID INT,
    Store VARCHAR(50),
    SalesAmount DECIMAL(10, 2)
);

INSERT INTO Sales (TransactionID, Store, SalesAmount)
VALUES
    (1, 'A', 100.00),
    (2, 'A', 200.00),
    (3, 'A', 150.00),
    (4, 'B', 250.00),
    (5, 'B', 300.00);
    
select * from sales;

-- window fun with AGG()
select * ,
sum(SalesAmount) over(partition by store order by SalesAmount desc) as rownum
from sales;

-- window fun with RANK()
select * ,
row_number() over(partition by store order by SalesAmount desc) as rownum
from sales;

select * ,
row_number() over(order by SalesAmount desc) as rownum
from sales;

-- DE-DUPLICATION using window() & cte
drop table if exists Employees;
CREATE TABLE Employees (
    EmployeeID INT,
    Name VARCHAR(100),
    Department VARCHAR(50),
    HireDate DATE
);


INSERT INTO Employees (EmployeeID, Name, Department, HireDate)
VALUES
    (1, 'Alice', 'HR', '2020-05-01'),
    (1, 'Alice', 'HR', '2022-06-15'),
    (2, 'Bob', 'IT', '2021-07-10'),
    (3, 'Charlie', 'Finance', '2020-09-30'),
    (3, 'Charlie', 'Finance', '2022-05-22');
 
with duplic_cte as(
	select *,
	row_number() over(partition by employeeid order by hiredate) rownum
	from employees
     )
select employeeId,name,department,hiredate from duplic_cte where rownum=1;

-- rank()

CREATE TABLE Students (
    StudentID INT,
    StudentName VARCHAR(100),
    ExamScore INT
);

INSERT INTO Students (StudentID, StudentName, ExamScore)
VALUES
    (1, 'Alice', 95),
    (2, 'Bob', 90),
    (3, 'Charlie', 95),
    (4, 'David', 85),
    (5, 'Eva', 90);
    
select *,
dense_rank() over(order by examscore desc) Ranking
from students;

-- NTILE : breaking up a result set into equally sized groups[ntile value]
-- calculation= no of rows / value of NTILE
-- ex: 10/4 = 2.5 ---->{partition by 2.5(2 to 3 rows)}

CREATE TABLE EmployeeSales (
    EmployeeID INT,
    EmployeeName VARCHAR(100),
    SalesAmount DECIMAL(10, 2)
);


INSERT INTO EmployeeSales (EmployeeID, EmployeeName, SalesAmount) VALUES
(1, 'Alice', 10000),
(2, 'Bob', 8500),
(3, 'Charlie', 7500),
(4, 'David', 6000),
(5, 'Eva', 11000),
(6, 'Frank', 4500),
(7, 'Grace', 3000),
(8, 'Hank', 4000),
(9, 'Ivy', 8000),
(10, 'Jack', 9500);

create view top_perform as
select *, 
ntile(4) over(order by salesamount desc) as sales_rank
from EmployeeSales;

select *, 
case
	when sales_rank =1 then 'Promotion' 
	when sales_rank =2 then 'Increment'
	when sales_rank =3 then 'Wait' 
	when sales_rank =4 then 'Try Hard' 
end as status_message
from top_perform;

-- LAG -> Gives the previous row's record

drop table if exists EmployeeSalaries;
CREATE TABLE EmployeeSalaries (
    EmployeeID INT,
    EmployeeName VARCHAR(100),
    Salary DECIMAL(10, 2),
    Year INT
);

INSERT INTO EmployeeSalaries (EmployeeID, EmployeeName, Salary, Year) VALUES
(1, 'Alice', 5000, 2023),
(1, 'Alice', 5500, 2024),
(2, 'Bob', 4500, 2023),
(2, 'Bob', 4800, 2024),
(3, 'Charlie', 4000, 2023),
(3, 'Charlie', 4200, 2024),
(4, 'David', 4600, 2023),
(4, 'David', 4700, 2024),
(5, 'Eva', 5200, 2023),
(5, 'Eva', 5400, 2024);

select *,
lag(salary) over(partition by employeeid order by year) as prev_year_salary 
from EmployeeSalaries;

select *,lag(salary) over(partition by employeeid order by year) as prev_year_salary,
salary-lag(salary) over(partition by employeeid order by year) as diff_salary 
from EmployeeSalaries;

-- LEAD -> Gives the value of next row's data

CREATE TABLE SalesData (
    SaleID INT,
    EmployeeName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
INSERT INTO SalesData (SaleID, EmployeeName, SaleAmount, SaleDate) VALUES
(1, 'Alice', 5000, '2025-01-01'),
(2, 'Bob', 3000, '2025-01-02'),
(3, 'Charlie', 4000, '2025-01-03'),
(4, 'David', 4500, '2025-01-04'),
(5, 'Eva', 5500, '2025-01-05');

select *,
lead(saleamount) over(order by saledate) next_sales,
lead(saleamount) over(order by saleamount)-saleamount as diff_amount
from SalesData;


-- first_value & last_value:

-- FIRST_VALUE -> gives the first value of each row based on patition
-- LAST_VALUE -> gives the last value of each row based on patition

drop table if exists EmployeeSalaries;
CREATE TABLE EmployeeSalaries (
    EmployeeID INT,
    EmployeeName VARCHAR(100),
    Salary DECIMAL(10, 2),
    Year INT
);

INSERT INTO EmployeeSalaries (EmployeeID, EmployeeName, Salary, Year) VALUES
(1, 'Alice', 5000, 2021),
(1, 'Alice', 5500, 2022),
(1, 'Alice', 6000, 2023),
(1, 'Alice', 6500, 2024),
(1, 'Alice', 7000, 2025),
(2, 'Bob', 4500, 2023),
(2, 'Bob', 4800, 2024),
(3, 'Charlie', 4000, 2023),
(3, 'Charlie', 4200, 2024),
(4, 'David', 4600, 2023),
(4, 'David', 4700, 2024),
(5, 'Eva', 5200, 2023),
(5, 'Eva', 5400, 2024);

-- first_value
select *,
first_value(salary) over (partition by employeeid order by year) as First_salary
from EmployeeSalaries;

-- last_value
-- 'ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING' (copy & paste for last value)
select *,
last_value(salary) over (partition by employeeid order by year ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) as Last_salary
from EmployeeSalaries;

-- last_value - current value
select *,
last_value(salary) over (partition by employeeid order by year ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) as last_salary,
last_value(salary) over (partition by employeeid order by year ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) - salary as Sal_diff
from EmployeeSalaries;

-- Nth_value -> gives the nth(1,2,3...) largest values
-- 'ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING' (copy & paste for Nth value)
select *,
nth_value(salary,2) over (partition by employeeid order by year desc ROWS BETWEEN UNBOUNDED preceding AND UNBOUNDED FOLLOWING ) as second_highest_salary
from EmployeeSalaries;
